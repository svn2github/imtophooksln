<?xml version="1.0" encoding="utf-8"?>
<!--////////////////////////////////////////////////////////////////////////////

    OpenZoom SDK Example
    Copyright (c) 2007-2009, Daniel Gasienica <daniel@gasienica.ch>

    License: MPL 1.1/GPL 3/LGPL 3

/////////////////////////////////////////////////////////////////////////////-->
<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:components="org.openzoom.flex.components.*"
    xmlns:controllers="org.openzoom.flash.viewport.controllers.*"
    xmlns:transformers="org.openzoom.flash.viewport.transformers.*"
    backgroundGradientColors="[0, 0]"
    layout="absolute"
    preinitialize="preinitializeHandler(event)"
    applicationComplete="applicationCompleteHandler(event)"
    >
    <mx:Style>
        global {
            theme-color: #FFCC00;
            font-family: Arial;
            font-size: 12;
        }
        Button {
            fill-alphas: 1, 1, 1, 1;
        }
    </mx:Style>

    <!-- Include settings such as Flickr API key -->
    <mx:Script source="config.as"/>

    <mx:Script>
        <![CDATA[

            //------------------------------------------------------------------
            //
            //  Imports
            //
            //------------------------------------------------------------------

            import caurina.transitions.Tweener;

            import com.adobe.webapis.flickr.Photo;
            import com.adobe.webapis.flickr.PagedPhotoList;
            import com.adobe.webapis.flickr.FlickrService;
            import com.adobe.webapis.flickr.events.FlickrResultEvent;

            import mx.events.FlexEvent;

    		import org.openzoom.flash.descriptors.IImagePyramidDescriptor;
    		import org.openzoom.flash.descriptors.ImagePyramidLevel;
        	import org.openzoom.flash.descriptors.deepzoom.DeepZoomImageDescriptor;
            import org.openzoom.flash.descriptors.djatoka.DjatokaDescriptor;
    		import org.openzoom.flash.events.ViewportEvent;
    		import org.openzoom.flash.renderers.images.ImagePyramidRenderer;
            import org.openzoom.flash.utils.ExternalMouseWheel;

            //------------------------------------------------------------------
            //
            //  Constants
            //
            //------------------------------------------------------------------

            // From: http://www.flickr.com/services/api/flickr.people.getPublicPhotos.html
            private static const USER_ID:String = "72389028@N00"
            private static const EXTRAS:String = "o_dims, original_format"

            // From: http://www.flickr.com/services/api/misc.urls.html
//          private static const IMAGE_SIZE:Number = 240
//          private static const IMAGE_SUFFIX:String = "_m"
//          private static const IMAGE_SIZE:Number = 500
//          private static const IMAGE_SUFFIX:String = ""
            private static const IMAGE_SIZE:Number = 1024
            private static const IMAGE_SUFFIX:String = "_b"

            private static const NUM_PHOTOS:uint = 100
            private static const DEFAULT_PAGE:uint = 3

            //------------------------------------------------------------------
            //
            //  Variables
            //
            //------------------------------------------------------------------

            private var flickr:FlickrService

            //------------------------------------------------------------------
            //
            //  Event handlers
            //
            //------------------------------------------------------------------

            private function preinitializeHandler(event:FlexEvent):void
            {
                Security.loadPolicyFile("http://african.lanl.gov/crossdomain.xml")
            }

            private function applicationCompleteHandler(event:FlexEvent):void
            {
                // Enable mouse wheel support on Mac OS
                ExternalMouseWheel.initialize(stage)

                flickr = new FlickrService(FLICKR_API_KEY)
                flickr.addEventListener(FlickrResultEvent.PEOPLE_GET_PUBLIC_PHOTOS,
                                        flickr_peopleGetPublicPhotosHandler,
                                        false, 0, true)
                flickr.people.getPublicPhotos(USER_ID, EXTRAS, NUM_PHOTOS, DEFAULT_PAGE)

                numColumns = container.sceneWidth / (IMAGE_SIZE * spacing)
            }

            private function flickr_peopleGetPublicPhotosHandler(event:FlickrResultEvent):void
            {
                if (!event.success)
                    return

                if (!init)
                {
                    stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler)
                    init = true                	
                }

                var photos:Array = PagedPhotoList(event.data.photos).photos as Array
                addPhotos(photos)

                var page:uint = event.data.photos.page
                var numPages:uint = event.data.photos.pages

                trace("Page", page, "of", numPages)

//                if (page < numPages)
//	                flickr.people.getPublicPhotos(USER_ID, EXTRAS, NUM_PHOTOS, page + 1)
//	            else
	               trace("Done.")
            }

            private var init:Boolean = false
            private var column:int = 0
            private var row:int  = 0
            private var spacing:Number = 1.02
            private var numColumns:int

            private function addPhotos(photos:Array):void
            {
                for (var i:int = 0; i < photos.length; i++)
                {
                    var photo:Photo = photos[i] as Photo

                    // Flickr photo URL:
                    // http://farm{farm-id}.static.flickr.com/{server-id}/{id}_{o-secret}_o.(jpg|gif|png)

                    var url:String = ["http://farm", photo.farmId,
                                      ".static.flickr.com/", photo.server, "/",
                                      photo.id, "_", photo.secret, IMAGE_SUFFIX, ".jpg"].join("")

                    if (isNaN(photo.originalWidth) || isNaN(photo.originalHeight))
                        continue

                    var aspectRatio:Number = photo.originalWidth / photo.originalHeight

                    var imageWidth:Number = photo.originalWidth
                    var imageHeight:Number = photo.originalHeight

//                    if (aspectRatio > 1)
//                    {
//                        imageWidth = IMAGE_SIZE
//                        imageHeight = IMAGE_SIZE / aspectRatio
//                    }
//                    else
//                    {
//                        imageWidth = IMAGE_SIZE * aspectRatio
//                        imageHeight = IMAGE_SIZE
//                    }

                    var photoDescriptor:IImagePyramidDescriptor

                    photoDescriptor = new DjatokaDescriptor(DJAKOTA_RESOLVER_URL,
                                                            url,
                                                            imageWidth,
                                                            imageHeight,
                                                            256,
                                                            1)


                    var scale:Number = 0.2
                    var renderer:ImagePyramidRenderer
                    renderer = new ImagePyramidRenderer()
                    renderer.width = imageWidth * scale
                    renderer.height = imageHeight * scale
                    renderer.source = photoDescriptor
                    
                    var size:Number = IMAGE_SIZE
                    var position:Point = new Point()
                    position.x = column * size * spacing + (IMAGE_SIZE - renderer.width) / 2
                    position.y = row * size * spacing + (IMAGE_SIZE - renderer.height) / 2

                    renderer.x = position.x
                    renderer.y = position.y

                    container.addChild(renderer)
                    
                    if (++column >= numColumns)
                    {
                        column = 0
                        row++
                    }
                }
            }

            private function stage_keyDownHandler(event:KeyboardEvent):void
            {
                if (event.keyCode != 82) // R
                    return

                var options:Array = [arrangeRandomly,
                                     arrangeInCircle,
                                     arrangeInColumns,
                                     arrangeInRows]

                var index:uint = Math.floor(Math.random() * 1000) % options.length
                var f:Function = options[index] as Function
                f()
            }

            private function arrangeRandomly():void
            {
                for (var i:int = 0; i < container.numChildren; i++)
                {
                    var child:DisplayObject = container.getChildAt(i)
                    var position:Point = new Point()

                    position.x = Math.random() * (container.sceneWidth - child.width)
                    position.y = Math.random() * (container.sceneHeight - child.height)

                    Tweener.addTween(child, {x: position.x,
                                             y: position.y,
                                             time: 0.5,
                                             transition: "easeOutQuad",
                                             delay: Math.random() * 0.15})
                }
            }

            private function arrangeInCircle():void
            {
                for (var i:int = 0; i < container.numChildren; i++)
                {
                    var child:DisplayObject = container.getChildAt(i)
                    var position:Point = new Point()

                    // Circular
                    var center:Point = new Point(container.sceneWidth / 2,
                                                 container.sceneHeight / 2)
                    var distance:Number = (0.5 + Math.random() * 0.5)
                                                * Math.min(container.sceneWidth - child.width,
                                                           container.sceneHeight - child.height)
                    var angle:Number = Math.random() * 2 * Math.PI
                    position.x = center.x + Math.cos(angle) * distance / 3
                    position.y = center.y + Math.sin(angle) * distance / 3

                    Tweener.addTween(child, {x: position.x,
                                             y: position.y,
                                             time: 0.5,
                                             transition: "easeOutQuad",
                                             delay: Math.random() * 0.15})
                }
            }

            private function arrangeInColumns():void
            {
                var column:int = 0
                var row:int = 0
                var spacing:Number = 1.1
                var numColumns:int = container.sceneWidth / (IMAGE_SIZE * spacing)

                for (var i:int = 0; i < container.numChildren; i++)
                {
                    var child:DisplayObject = container.getChildAt(i)
                    var position:Point = new Point()

                    var size:Number = IMAGE_SIZE
                    position.x = column * size * spacing + (IMAGE_SIZE - child.width) / 2
                    position.y = row * size * spacing + (IMAGE_SIZE - child.height) / 2

                    Tweener.addTween(child, {x: position.x,
                                             y: position.y,
                                             time: 0.5,
                                             transition: "easeOutQuad",
                                              delay: Math.random() * 0.15})

                    if (++column >= numColumns)
                    {
                        column = 0
                        row++
                    }
                }
            }

            private function arrangeInRows():void
            {
                var column:int = 0
                var row:int  = 0
                var spacing:Number = 1.05
                var numRows:int = container.sceneHeight / (IMAGE_SIZE * spacing)

                for (var i:int = 0; i < container.numChildren; i++)
                {
                    var child:DisplayObject = container.getChildAt(i)
                    var position:Point = new Point()

                    var size:Number = IMAGE_SIZE
                    position.x = column * size * spacing + (IMAGE_SIZE - child.width) / 2
                    position.y = row * size * spacing + (IMAGE_SIZE - child.height) / 2

                    Tweener.addTween(child, {x: position.x,
                                             y: position.y,
                                             time: 0.5,
                                             transition: "easeOutQuad",
                                             delay: Math.random() * 0.15})

                    if (++row >= numRows)
                    {
                        row = 0
                        column++
                    }
                }
            }

            private function shakeItButton_clickHandler(event:Event):void
            {
                arrangeRandomly()
            }

            private function circularLayoutButton_clickHandler(event:Event):void
            {
                arrangeInCircle()
            }

            private function gridColumnsButton_clickHandler(event:Event):void
            {
                arrangeInColumns()
            }

            private function gridRowsButton_clickHandler(event:Event):void
            {
                arrangeInRows()
            }

        ]]>
    </mx:Script>

    <components:MultiScaleContainer
        id="container"
        top="40" right="0" bottom="0" left="0"
        sceneWidth="48000"
        sceneHeight="48000"
        >
        <components:controllers>
            <controllers:KeyboardController/>
            <controllers:MouseController/>
            <controllers:ContextMenuController/>
        </components:controllers>
        <components:transformer>
            <transformers:TweenerTransformer/>
        </components:transformer>
    </components:MultiScaleContainer>
    <mx:HBox
        horizontalCenter="0"
        top="10"
        >
        <mx:Button
            id="shakeItButton"
	        label="Shake it!"
            click="shakeItButton_clickHandler(event)"
            />
        <mx:Button
            id="circularLayoutButton"
	        label="Circular"
            click="circularLayoutButton_clickHandler(event)"
            />
        <mx:Button
            id="gridColumnsButton"
	        label="Grid (columns)"
            click="gridColumnsButton_clickHandler(event)"
            />
        <mx:Button
            id="gridRowsButton"
	        label="Grid (rows)"
            click="gridRowsButton_clickHandler(event)"
            />
    </mx:HBox>

</mx:Application>