package de.johannesluderschmidt.controller{	import de.johannesluderschmidt.demoObjects.MovableSquare;
	import de.johannesluderschmidt.demoObjects.Multitouchable;
	
	import de.johannesluderschmidt.tuio.TouchEvent;//	import flash.events.TouchEvent;		import flash.events.EventDispatcher;		/**	 * @class TouchEventsManager.as	 * @namespace com.niquimerret.digitalvolvelles.controllers	 * @author Niqui Merret	 * @version 1.0	 * @date May 25, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class TouchEventsManager extends EventDispatcher 	{		private var mActiveEvents : Array;		private static var mInstance : TouchEventsManager;		private static var allowInst : Boolean = false;				public function TouchEventsManager()		{			if (!allowInst) {	            throw new Error("Error: Instantiation failed: Use TouchEventsManager.getInstance() instead of new.");	          }	          else	          {	          	mActiveEvents = new Array();	          }					}					public static function getInstance():TouchEventsManager		{						if (mInstance == null)			{            	allowInst = true;				mInstance = new TouchEventsManager();				allowInst = false;				}			return mInstance;					}			/*********************************************************************************************	 * public 	 *********************************************************************************************/			public function eventInUse (e : TouchEvent) : Boolean		{			var i : uint;			var len : uint = mActiveEvents.length;						for (i = 0; i < len; i++)			{				if (mActiveEvents[i].id == e.ID)				{					return true;				}			}			return false;		}				public function addActiveEvent (e : TouchEvent) : void		{//			trace("addActiveEvent - e.ID = " + e.ID,"in",this);						if (e.currentTarget is Multitouchable )//|| e.currentTarget is DuoSideWheel || e.currentTarget is CentreWheel )			{//				//when it rolls over another object that is above it it will try to add it again.//				//this stops the conflict				var i : uint;				var len : uint = mActiveEvents.length;//								for (i = 0; i < len; i++)				{					if (mActiveEvents[i].id == e.ID)					{//						//now we need to tell the last object to render a mouseUp...						if (mActiveEvents[i].currentTarget != e.currentTarget)						{							if (mActiveEvents[i].currentTarget is Multitouchable)							{								mActiveEvents[i].currentTarget.mouseUp(e);							}//							else //							if (mActiveEvents[i].currentTarget is DuoSideWheel)//							{//								mActiveEvents[i].currentTarget.mouseUp(e);//							}//							else //							if (mActiveEvents[i].currentTarget is CentreWheel)//							{//								mActiveEvents[i].currentTarget.mouseUpCircle(e);//							}//							mActiveEvents[i].currentTarget = e.currentTarget;						}												return;					}				}												var obj : Object = new Object();				obj.id = e.ID;				obj.currentTarget = e.currentTarget;				mActiveEvents.push(obj);//				dispatchEvent(new FoldEvent(FoldEvent.FOLD_OVERLAYS, true));			}								}				public function endActiveEvent (e : TouchEvent) : void		{			//			trace("endActiveEvent - e.ID = " + e.ID);						var useCount : Number = 0;			var selID : Number = -1;			var i : uint;			var len : uint = mActiveEvents.length;						for (i = 0; i < len; i++)			{				if (e.ID == mActiveEvents[i].id)				{					selID = i;					}							}			if (selID > -1)			{				var selTarget : Object = mActiveEvents[selID].currentTarget;								for (i = 0; i < len; i++)				{					if (selTarget == mActiveEvents[i].currentTarget)					{						useCount++;						}				}								if (useCount == 1)				{										if (selTarget is MovableSquare)					{						selTarget.mouseUp(e);					}//					else //					if (selTarget is DuoSideWheel)//					{//						selTarget.mouseUp(e);//					}//					else //					if (selTarget is CentreWheel)//					{//						selTarget.mouseUpCircle(e);//					}									}				//				dispatchEvent(new FoldEvent(FoldEvent.FOLD_OVERLAYS, false));				mActiveEvents.splice(selID, 1);							}		}				public function clearStuck (pWheel : Object) : void		{							var i : uint;				var len : uint = mActiveEvents.length;								for (i = 0; i < len; i++)				{					if (mActiveEvents[i].currentTarget == pWheel)					{						mActiveEvents.splice(i, 1);											}				}		}		public function getActiveEvents(target:Object):Array{			var eventArrayTemp:Array = new Array();			for each(var eventTemp:Object in mActiveEvents){				if(eventTemp.currentTarget == target){					eventArrayTemp.push(eventTemp);				}			}			return eventArrayTemp;		}	}}