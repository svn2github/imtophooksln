/*//			appDict["38"] = "pap1072-chan";	    MultiScaleImage Component    OpenZoom SDK Example    http://openzoom.org/    Developed by Daniel Gasienica <daniel@gasienica.ch>    License: MPL 1.1/GPL 3/LGPL 3*/package{//import fl.controls.Button;import flash.display.Sprite;import flash.events.*;import flash.utils.Dictionary;import impro.IImproApp;import impro.Setting;import impro.googlemap.ViewportControl;import impro.googlemap.events.HResEvent;import impro.multiview.IMView;import impro.openzoom.IMLowResEvent;import impro.openzoom.IMMultiScaleContainer;import org.openzoom.flash.descriptors.IImagePyramidDescriptor;import org.openzoom.flash.descriptors.deepzoom.DeepZoomImageDescriptor;import org.openzoom.flash.renderers.images.ImagePyramidRenderer;import org.openzoom.flash.viewport.constraints.ScaleConstraint;import org.openzoom.flash.viewport.controllers.IMTouchController;import org.openzoom.flash.viewport.transformers.TweenerTransformer;import caurina.transitions.Tweener;//import com.greensock.*;[SWF(width=2400, height=600, frameRate=24)]public class MultiScaleImageApp extends Sprite implements IImproApp{		private var containerDict:Dictionary = new Dictionary();    private var scaleConstraint:ScaleConstraint;	private var toNextTransform:Function;	private var flashlighDraging:Boolean = false;		    public function MultiScaleImageApp(doc:String="river")    {    // Setup stage//    stage.align = StageAlign.TOP_LEFT;//    stage.scaleMode = StageScaleMode.NO_SCALE;//    stage.addEventListener(Event.RESIZE, stage_resizeHandler);//		TUIO.init(Setting.LRes, this, 'localhost', 3000, '', Setting.DEBUG);		//		stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);	    addEventListener(IMLowResEvent.LRES_UPDATE, imLResMoveEndHandler, false, 0, true);		addEventListener(HResEvent.POSE_CHANGE, hresPosChange);		TUIO.addIMObjectListener(this);				addContainers();		// easing options: http://hosted.zeh.com.br/tweener/docs/en-us/misc/transitions.html//	    var transformer:TweenerTransformer = new TweenerTransformer();//	    transformer.easing = "easeInOutExpo"; //"easeOutBack";//	    transformer.duration = 0.5; // seconds//	    (containerDict[Setting.LRes.id] as IMMultiScaleContainer).transformer = transformer;		addRenderers(doc);			//	    toNextTransform = function():void{//		    var transformer:TweenerTransformer = new TweenerTransformer();//		    transformer.easing = "easeOutQuint"; //"easeOutQuint";//		    transformer.duration = 2; // seconds		    //		    (containerDict[Setting.LRes.id] as IMMultiScaleContainer).transformer = transformer;//	    };	   //	    Tweener.addTween(this, {time:3, onComplete:toNextTransform});		updateHResViews();    }	    // impro    private function imLResMoveEndHandler(event:IMLowResEvent):void{//    	trace("imLResMovedHandler(event:IMLowResEvent)");    	updateHResViews();    	trace("imLResUpdateHandler()");    }	private function hresPosChange(e:Event):void{		var he:HResEvent = e as HResEvent;		trace(he.ID + ": " + he.rx1 + ", "+ he.ry1 + ", "+ he.rx2 + ", "+ he.ry2);				if(getViewport(he.ID) != null){			var _vpControl:ViewportControl = getViewport(he.ID);			if(_vpControl.isBeyondStable(he, 5)){				_vpControl.setViewportBound(he.rx1, he.ry1, he.rx2, he.ry2);							_vpControl.setViewportOriPts(he.oriPt1, he.oriPt2, he.oriPt3, he.oriPt4);							}				}				updateHResViews();	}	public function getViewport (id:Number):ViewportControl{		if(containerDict[id] == null)			return null;			return (containerDict[id] as IMMultiScaleContainer).viewportControl;	}		private function onKey(event:KeyboardEvent):void{		trace("keydown");			}			private function addRenderers(doc:String):void{		var lres:IMView = Setting.LRes;		var lResContainer:IMMultiScaleContainer = (containerDict[lres.id] as IMMultiScaleContainer);		//		var path:String = "F:/bigPic";		var path:String = "http://ivlab.csie.ntu.edu.tw/imPro/resource"; 				var width:Number = lResContainer.sceneWidth/2;		var height:Number = lResContainer.sceneHeight/2;		if(doc=="river"){			height -= 4620/2;			addRender(path + "/k2a00111003/dzc_output.xml", 25000*(2), height, 25000, 4620);			addRender(path + "/k2a00111004/dzc_output.xml", 25000*(1), height, 25000, 4620);			addRender(path + "/k2a00111002/dzc_output.xml", 25000*(3), height, 25000, 4620);			addRender(path + "/k2a00111005/dzc_output.xml", 25000*(0), height, 25000, 4620);			addRender(path + "/k2a00111001/dzc_output.xml", 25000*(4), height, 24800, 4620);			lResContainer.zoomBy(14);						(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 14;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 56;									}		else if(doc=="impro_photoset_01"){			width -= 33313/2;						height -= 12314/2;			addRender(path + "/impro_photoset_01/dzc_output.xml", width, height, 33313, 12314);			lResContainer.zoomBy(5);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 5;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 25;						}		else if(doc=="npm_animal_3"){			width -= 7204/2;						height -= 12182/2;			addRender(path + "/npm_animal_3/dzc_output.xml", width, height, 7204, 12182);			lResContainer.zoomBy(7.5);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 5;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 25;						}				else if(doc=="npm_anima_7"){			width -= 4305/2;						height -= 4988/2;			addRender(path + "/npm_animal_7/dzc_output.xml", width, height, 4305, 4988);			lResContainer.zoomBy(18);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 5;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 25;						}				else if(doc=="moneyNotArt"){			width -= 26712/2;						height -= 11864/2;			addRender(path + "/moneyNotArt/dzc_output.xml", width, height, 26712, 11864);			lResContainer.zoomBy(5);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 5;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 25;						}		else if(doc=="pap1072-chan"){			width -= 5200/2;			height -= 6600/2;			addRender(path + "/pap1072-chan/dzc_output.xml", width, height, 51986, 6600);			lResContainer.zoomBy(8);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 6;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 16;								}		else if(doc=="p1165-baudisch"){			width -= 5200/2;			height -= 6600/2;			addRender(path + "/p1165-baudisch/dzc_output.xml", width, height, 51986, 6600);			lResContainer.zoomBy(8);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 6;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 16;		}						else if(doc=="uist2010_impro"){			width -= 5200/2;			height -= 6600/2;			addRender(path + "/uist2010_impro/dzc_output.xml", width, height, 51915, 6600);			lResContainer.zoomBy(8);			(lResContainer.controllers[0] as IMTouchController).minZoomFactor = 6;			(lResContainer.controllers[0] as IMTouchController).maxZoomFactcor = 16;			}		}        public function iFlashlightMouseDown():void{    	// show siggraph    }    public function iFlashlightMouseUp():void{    	// hide siggraph     }        private function addContainers():void{    	    	var lres:IMView = Setting.LRes;    			var lresContainer:IMMultiScaleContainer = genContainer(lres.stageX, lres.stageWidth, lres.stageHeight, true);        containerDict[lres.id] = lresContainer;//		lresContainer.controllers = [new IMMouseController()];		lresContainer.controllers = [new IMTouchController()];	    addChild(lresContainer);	    	    	    //		container1.constraint = new ScaleConstraint();//		var visibilityConstraint:VisibilityConstraint = new VisibilityConstraint();//		visibilityConstraint.visibilityRatio = 0.6;//		container1.constraint = visibilityConstraint;                     var hresIndex:Number = 0;		for each (var hres:IMView in Setting.HRes){			hresIndex++;			var hresContainer:IMMultiScaleContainer = genContainer(hres.stageX, hres.stageWidth, hres.stageHeight, false);	        containerDict[hres.id] = hresContainer;						var vpControl:ViewportControl = new ViewportControl(hres.id, updateCallback, 100*hresIndex, 100*hresIndex, 100, 100, Setting.DEBUG);			hresContainer.viewportControl = vpControl; 						addChild(hresContainer);			addChild(hresContainer.viewportControl);							} 		    }        private function genContainer(windowX:Number, viewportWidth:Number, viewportHeight:Number, isLResView:Boolean = true):IMMultiScaleContainer {	    var container: IMMultiScaleContainer = new IMMultiScaleContainer(isLResView);	    	    	    container.setActualSize(viewportWidth, viewportHeight);	    container.x = windowX;	    var mask:Sprite = new Sprite();	    mask.graphics.beginFill(0x000000);	    mask.graphics.drawRect(windowX, 0, viewportWidth, viewportHeight);	    mask.graphics.endFill();		container.mask = mask;		return container;    	    }        private function addRender(path:String, imageX:Number, imageY:Number, imageWidth:Number, imageHeight:Number):void{    	    	for each (var container:IMMultiScaleContainer in containerDict){		    var photoDescriptor:IImagePyramidDescriptor;		    var descriptorXML:XML = <Image TileSize="256" Overlap="1" Format="jpg" xmlns="http://schemas.microsoft.com/deepzoom/2009">			                            <Size Width={imageWidth} Height={imageHeight}/>		                            </Image>;		    photoDescriptor = DeepZoomImageDescriptor.fromXML(path, descriptorXML);					    var renderer:ImagePyramidRenderer;		    renderer = new ImagePyramidRenderer();		    renderer.x = imageX;		    renderer.y = imageY;		    renderer.width = imageWidth;		    renderer.height = imageHeight;		    renderer.source = photoDescriptor;			    container.addChild(renderer);    	}     }        public function updateHResViews():void{				var lres:IMView = Setting.LRes;		var lresContainer:IMMultiScaleContainer = containerDict[lres.id];		var vp1X:Number = lresContainer.viewportX;		var vp1Y:Number = lresContainer.viewportY;		var vp1W:Number = lresContainer.viewportWidth;		var vp1H:Number = lresContainer.viewportHeight;		var vp1Z:Number = lresContainer.zoom;						// High Res				for each (var hres:IMView in Setting.HRes){			var container:IMMultiScaleContainer = containerDict[hres.id];			var _vpControl:ViewportControl = container.viewportControl;				    	var dx:Number = (_vpControl.x - _vpControl.w /2) / lres.stageWidth / vp1Z;	    	var dy:Number = (_vpControl.y - _vpControl.h /2) / lres.stageHeight / vp1Z;	    		    	var dw:Number = _vpControl.w / lres.stageWidth / vp1Z;	    	var dh:Number = _vpControl.h / lres.stageHeight / vp1Z;	    	container.viewportX = vp1X + dx;	    	container.viewportY = vp1Y + dy;	    	var value:Number = Math.max(dw, dh);	    	container.viewportWidth = value;	    	if(dw > dh){	    		container.scaleX = 1;	    		container.scaleY = dw / dh;	    	}else{	    		container.scaleX = dh / dw;	    		container.scaleY = 1;	    	}    						}    	    }        public function updateCallback(_vpControl:ViewportControl):void{    	updateHResViews();    }        		 	public function updateView():void{}		public function dispose():void{	    removeEventListener(IMLowResEvent.LRES_UPDATE, imLResMoveEndHandler);		removeEventListener(HResEvent.POSE_CHANGE, hresPosChange);		for each (var container:IMMultiScaleContainer in containerDict)			container.dispose();				} 	   }}