package de.johannesluderschmidt.tuio {	import flash.geom.Point;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.events.EventDispatcher; 		/**	 * @class HotSpotIgnore.as	 * @namespace tuio	 * @author Niqui Merret	 * @version 1.0	 * @date May 26, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class HotSpotIgnore extends EventDispatcher 	{		private var loader : URLLoader;		private var hotSpotList : Array;				public function HotSpotIgnore()		{			hotSpotList = new Array();						var request : URLRequest = new URLRequest("hotspot.xml");            loader = new URLLoader();                        try {                loader.load(request);            }            catch (error:SecurityError)            {                trace("A SecurityError has occurred.");            }             loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);           	 loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);		}				public function checkHotSpot (pTestPoint : Point) : Boolean		{			var i:int;			var len:int = hotSpotList.length;			for (i = 0; i < len; i++)			{								if (pTestPoint.x > hotSpotList[i].x - 20 && pTestPoint.x < hotSpotList[i].x + 20 && pTestPoint.y > hotSpotList[i].y - 20 && pTestPoint.y < hotSpotList[i].y + 20)				{					trace("---- in the area ----");					return true;				}			}			return false;		}								private function loaderCompleteHandler (e : Event) : void		{			var hotSpotXML:XML = XML(e.target.data);						var i:int;			var items:XMLList = hotSpotXML.hotSpot;			var len:int = items.length();			var hotSpotPoint : Point;						for (i = 0; i < len; i++)			{			 	hotSpotPoint = new Point();			 	hotSpotPoint.x = Number(items[i].@x);			 	hotSpotPoint.y = Number(items[i].@y);			 	hotSpotList.push(hotSpotPoint);			 				}					}		private function errorHandler (e : IOErrorEvent) : void		{		}	}}